#!/usr/bin/env ruby
require "mustache"
require "fileutils"
require_relative "../lib/blogdown"
require_relative "../lib/slide_repository"
require_relative "../lib/slide"

root = File.expand_path "../..", __FILE__
src = File.join root, "src"
templates = File.join src, "templates"
pages = File.join src, "pages"

pub = if ENV['DESTDIR']
        puts ENV['DESTDIR']
        File.join root, ENV['DESTDIR']
      else
        File.join root, "pub"
      end

slides = File.join src, "slides"

if File.exists? pub
  pubdir = Dir.new pub
  pubdir.each do |file|
    FileUtils.rm_r File.join(pubdir.path, file) unless [".", "..", ".git"].include? file
  end
else
  Dir.mkdir pub
end


CONTEXT = {}

File.write File.join(pub, "CNAME"), "nuclearsandwich.com"

%w[ fonts images stylesheets javascripts ].each do |f|
  FileUtils.cp_r File.join(src, f), File.join(pub, f)
end

style = 'solarizedl'

if style == 'github'
  FileUtils.cp File.join(src, "stylesheets", "github.css"), File.join(pub, "stylesheets", "pygments.css")
else
  File.write File.join(pub, "stylesheets", "pygments.css"), Pygments.css(:style => style)
end

index = Mustache.new
index.template_path = templates
index.template = File.read File.join(templates, "index.mustache")


slide_repo = SlideRepository.new slides, ENV['NODRAFTS']

CONTEXT[:content] = ""
slide_repo.map do |slide|
  CONTEXT[:content] << slide.html_content
end

File.write File.join(pub, "index.html"), index.render(CONTEXT)

